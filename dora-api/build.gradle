import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
    }
}

plugins {
    id 'net.ltgt.apt' version '0.9'
    id 'com.github.jk1.dependency-license-report' version '0.8'
}

group projectGroup
version projectVersion

apply plugin: "jacoco"
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'maven-publish'
apply plugin: 'com.github.johnrengelman.shadow'

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${project.buildDir}/jacocoHtml"
    }
}

sourceCompatibility = 1.8

project.ext {
    mainclass = "gov.ca.cwds.rest.DoraApplication"

    coreApiVersion = "1.19.1_928-RC" 
    dropwizardVersion = "1.1.0"
    metricsVersion = "3.1.0"
    dropwizardSwaggerVersion = "1.0.0-1"
    powerMockVersion = "1.7.3"
    mockitoVersion = "2.8.9"
}

shadowJar {
    classifier = 'dist'
    baseName = 'dora'
    mergeServiceFiles()
    manifest {
        attributes 'Main-Class': mainclass
    }
    version = projectVersion
}

mainClassName = mainclass

repositories {
    mavenLocal()
    maven {
        url "http://pr.dev.cwds.io/artifactory/repo"
    }
    mavenCentral()
}

processResources {
    filter(ReplaceTokens, tokens: [
        'build.version': projectVersion as String
    ])
}

dependencies {
    // Dropwizard-guice 1.0.0.2 conflicts with jersey-client 2.25.
    // Exclude transitive dependencies.
    compile(group: 'gov.ca.cwds.api', name: 'api-core-rest', version: coreApiVersion) {
        exclude group: 'org.glassfish.jersey.core'
        exclude group: 'org.elasticsearch', module: 'elasticsearch'
        exclude group: 'org.elasticsearch.client', module: 'transport'
    }

    compile group: 'gov.ca.cwds.api', name: 'api-security', version: '3.0.3_768-RC'

    compile group: 'org.elasticsearch', name: 'elasticsearch', version: project.elasticsearchVersion
    compile group: 'org.elasticsearch.client', name: 'elasticsearch-rest-client', version: project.elasticsearchVersion
//    compile group: 'org.elasticsearch.client', name: 'sniffer', version: project.elasticsearchVersion

    compile group: 'org.apache.commons', name: 'commons-compress', version: '1.14'

    compile group: "io.dropwizard", name: "dropwizard-client", version: dropwizardVersion
    compile group: "io.dropwizard", name: "dropwizard-views", version: dropwizardVersion
    compile group: "io.dropwizard", name: "dropwizard-views-mustache", version: dropwizardVersion
    compile group: 'io.dropwizard', name: 'dropwizard-assets', version: dropwizardVersion
    compile group: "io.dropwizard", name: "dropwizard-testing", version: dropwizardVersion
    compile group: "io.dropwizard.metrics", name: "metrics-core", version: metricsVersion

    compile group: "org.glassfish.jersey.ext", name: "jersey-declarative-linking", version: "2.23.2"
    compile group: "javax.el", name: "javax.el-api", version: "2.2.4"
    compile group: "org.glassfish.web", name: "javax.el", version: "2.2.4"
    compile group: 'org.bouncycastle', name: 'bcprov-jdk16', version: '1.46'
    compile group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.3'
    compile group: 'org.slf4j', name: 'slf4j-ext', version: '1.7.22'

    compile group: 'org.glassfish.jersey.core', name: 'jersey-client', version: '2.25.1'
    compile group: 'com.hubspot.dropwizard', name: 'dropwizard-guice', version: '1.0.6.0'

    compile group: 'org.secnod.dropwizard', name: 'dropwizard-shiro', version: '0.2.0'

    compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.11'

    compile fileTree(dir: 'lib', include: ['*.jar'])

    compile group: 'io.swagger', name: 'swagger-jersey2-jaxrs', version: '1.5.9'
    compile group: 'io.swagger', name: 'swagger-annotations', version: '1.5.9'
    compile group: 'org.json', name: 'json', version: '20090211'

    compile group: 'org.apache.commons', name: 'commons-io', version: '1.3.2'

    testCompile group: 'org.mockito', name: 'mockito-core', version: mockitoVersion
    testCompile group: 'org.hamcrest', name: 'hamcrest-junit', version: '2.0.0.0'
    testCompile('org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:2.23.2') {
        exclude group: 'javax.servlet', module: 'javax.servlet-api'
        exclude group: 'junit', module: 'junit'
    }

    testCompile group: 'nl.jqno.equalsverifier', name: 'equalsverifier', version: '2.1.6'
    testCompile group: 'com.github.fge', name: 'json-schema-validator', version: '2.2.6'
    testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: powerMockVersion
    testCompile group: 'org.powermock', name: 'powermock-api-mockito2', version: powerMockVersion

    testCompile group: 'com.google.errorprone', name: 'error_prone_annotations', version: '2.0.19'

    testCompile group: 'gov.ca.cwds.api', name: 'api-core-test-support', version: coreApiVersion
}


run {
    args "server", configPath + "dora.yml"
}

test {
    exclude '**/*IT*', '**/*SmokeTest*'
}

task integrationTest(type: Test, dependsOn: testClasses) {
    include '**/*IT*'
    exclude '**/*Test*'
}

task smokeTest(type: Test) {
    // URL where smoke tests will be pointed to (change it in gradle.properties)
    def doraUrl = project.property('test.dora.url')
    println 'Running Smoke Tests against ' + doraUrl
    systemProperty 'dora.url', doraUrl
    systemProperty 'auth.mode', project.property('test.auth.mode')
    systemProperty 'perry.url', project.property('test.perry.url')
    include '**/*SmokeTestSuite*'
}

processResources {
    filter(ReplaceTokens, tokens:[
            'build.version' : projectVersion as String,
            'build.number' : (System.getenv("BUILD_NUMBER") ?: "IDE")
    ])
}

publishing {
    publications {
        library(MavenPublication) {
            from components.java
            groupId projectGroup
            artifactId rootProject.name
        }
    }
    repositories {
        maven {
            url artifactoryRepo
        }
    }
}

licenseReport {
    renderers = [new XmlReportRenderer(), new CwdsCsvReportRenderer(), new InventoryHtmlReportRenderer()]
    excludeGroups = ['gov.ca.cwds.api.libs']
}


def licenceDir = 'build/reports/dependency-license'
def legalDir = "../legal/"
task libLicenceFolders(type: Copy){
    from licenceDir
    into "${legalDir}/licenses"
    exclude "index.html"
    exclude "index.xml"
    exclude "licenses.csv"
}

import com.github.jk1.license.render.*
task libLicenseReportFiles(type: Copy){
    from licenceDir
    into legalDir
    include "index.html"
    include "index.xml"
    include "licenses.csv"
}

task libLicenseReport(dependsOn:[generateLicenseReport, libLicenceFolders,
                                 libLicenseReportFiles ] ) {
    println("\n\n License files are generated in : ${licenceDir}")
}

//==================================================================================================
// Custom Groovy classes for Licence Reports.
// Move to own classes outside of build.

import com.github.jk1.license.ModuleData;
import com.github.jk1.license.ProjectData;

import com.github.jk1.license.LicenseReportExtension
public class CwdsCsvReportRenderer extends CsvReportRenderer {
    @Override
    public void render(ProjectData data){
        LicenseReportExtension config = data.project.licenseReport
        File output = new File(config.outputDir, filename)
        output.write('')

        if (includeHeaderLine) {
            output << header();
        }

        data.allDependencies.sort().each {
            renderDependency(output, it)
        }
    }

    CwdsCsvReportRenderer(String filename = 'licenses.csv') {
        this.filename = filename
    }

    void renderDependency(File output, ModuleData data) {
        output << line(data)
    }

    private String header(){
        return "${quote('artifact')}$separator${quote('name')}$separator${quote('version')}$separator${quote('moduleUrl')}$separator${quote('moduleLicense')}$separator${quote('moduleLicenseUrl')}$separator${quote('projectUrl')}$separator$nl"
    }

    private String line(ModuleData data){
        def (String moduleUrl, String moduleLicense, String moduleLicenseUrl) = LicenseDataCollector.singleModuleLicenseInfo(data)
        String artifact = "${data.group}:${data.name}:${data.version}"
        return "${quote(artifact)}$separator${quote(data.name)}$separator${quote(data.version)}$separator${quote(moduleUrl)}$separator${quote(moduleLicense)}$separator${quote(moduleLicenseUrl)}$separator${quote(projectUrl(data))}$separator$nl"
    }

    private String projectUrl(ModuleData data){
        Set urls = new HashSet();
        data.poms.each {
            urls << it.projectUrl
        }
        urls.join(" ")
    }

    private String quote(String content) {
        if (content == null || content.isEmpty()) {
            return ''
        }
        content = content.trim()
        content = content.replaceAll(quote, "\\\\$quote")
        "${quote}${content}${quote}"
    }
}