import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import org.apache.tools.ant.filters.FixCrLfFilter

def dockerImageName = targetDockerHubOrganization + '/dora-tests' // like 'cwds/dora-tests'
def dockerContextDir = "build/docker-context"
def dockerTag = projectVersion

task dockerTestsCleanUpLatest(type: Exec, dependsOn: project.rootProject.checkDockerService) {
    ignoreExitValue true
    environment << project.dockerEnvVars
    doFirst {
        commandLine 'docker', 'rmi', '--force', "$dockerImageName:latest"
    }
}

task dockerTestsCleanUpTagged(type: Exec, dependsOn: project.rootProject.checkDockerService) {
    ignoreExitValue true
    environment << project.dockerEnvVars
    doFirst {
        commandLine 'docker', 'rmi', '--force', "$dockerImageName:$dockerTag"
    }
}

task dockerTestsCleanUp (dependsOn: [dockerTestsCleanUpLatest, dockerTestsCleanUpTagged]) {}

task testsJar(type: ShadowJar, dependsOn: [project.parent.compileJava, project.parent.compileTestJava]) {
    zip64 true
    baseName 'dora'
    version ''
    classifier 'tests'
    
    from sourceSets.main.output
	from sourceSets.test.output
    // the following will expand all dependencies from jar files
    from project.parent.configurations.compile
    from project.parent.configurations.testCompile

    destinationDir file(dockerContextDir)

    // exclusions to avoid Exception in thread "main" java.lang.SecurityException: Invalid signature file digest for Manifest main attributes
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'

    mergeServiceFiles()
}

task dockerTestsCopyResources(type: Copy) {
    from '../src/main/resources'
    from '../src/test/resources'
    into "$dockerContextDir/resources"
}

task dockerTestsCopyConfig(type: Copy) {
    from '../config'
    from '../src/test/resources/config'
    into "$dockerContextDir/config"
}

task dockerTestsCopyScripts(type: Copy) {
    from projectDir
    into dockerContextDir
    include 'entrypoint.sh'
    include 'Dockerfile-tests'
    filter(FixCrLfFilter.class, eol:FixCrLfFilter.CrLf.newInstance("lf"))
}

task dockerTestsCreateImage(type:Exec, dependsOn: [project.rootProject.checkDockerService, dockerTestsCleanUp, testsJar, dockerTestsCopyResources, dockerTestsCopyConfig, dockerTestsCopyScripts]) {
    environment << project.dockerEnvVars
    doFirst {
        commandLine 'docker', 'build', '-t', dockerImageName, '-f', "$dockerContextDir/Dockerfile-tests", dockerContextDir
    }
    dockerTestsCleanUp.mustRunAfter(project.rootProject.checkDockerService)
}

task dockerTestsTagImage(type: Exec, dependsOn: project.rootProject.checkDockerService) {
    environment << project.dockerEnvVars
    doFirst {
        commandLine 'docker', 'tag', dockerImageName, "$dockerImageName:$dockerTag"
    }
}

task dockerTestsPushTaggedVersion(type: Exec, dependsOn: [project.rootProject.checkDockerService, dockerTestsTagImage]) {
    environment << project.dockerEnvVars
    doFirst {
        commandLine 'docker', 'push', "$dockerImageName:$dockerTag"
    }
    dockerTestsTagImage.mustRunAfter(project.rootProject.checkDockerService)
}

task dockerTestsPushLatestVersion(type: Exec, dependsOn: project.rootProject.checkDockerService) {
    environment << project.dockerEnvVars
    doFirst {
        commandLine 'docker', 'push', "$dockerImageName:latest"
    }
}

task dockerTestsPublish(dependsOn: [dockerTestsPushTaggedVersion, dockerTestsPushLatestVersion]) {
    doLast {
        println "\nDocker Image with Dora Tests $projectVersion is published"
    }
    dockerTestsPushTaggedVersion.mustRunAfter(dockerTestsCreateImage)
    dockerTestsPushLatestVersion.mustRunAfter(dockerTestsCreateImage)
}
