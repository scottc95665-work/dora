import static org.gradle.api.logging.LogLevel.INFO

buildscript {
    repositories {
        maven {
            url "http://pr.dev.cwds.io/artifactory/repo"
        }
    }
}

plugins {
    id "org.sonarqube" version "2.5"
    id "com.github.hierynomus.license" version "0.14.0"
}

project.logging.setLevelInternal(INFO)

project.ext {
    projectGroup = 'gov.ca.cwds.services'
    projectMajorVersion = '2.0.0'

    isRelease = System.getProperty("Release") == "true"
    buildNumber = System.getProperty('BuildNumber')
    customVersion = System.getProperty('CustomVersion')

    projectSnapshotVersion = projectMajorVersion + "-SNAPSHOT"
    projectReleaseVersion = (customVersion == null || customVersion == "" || customVersion.startsWith('$') ? projectMajorVersion + '_' + buildNumber + '-RC' : customVersion )
    projectVersion = (isRelease ? projectReleaseVersion : projectSnapshotVersion )

    elasticsearchVersion = '6.8.0'

    mainclass = "gov.ca.cwds.rest.DoraApplication"
    configPath = "$rootProject.projectDir/config/"

    targetDockerHubOrganization = System.env.DOCKERHUB_ORG ?: 'cwds'

    // assume that Windows users use the Docker Toolbox
    buildEnv = 'JENKINS'
    devDockerHost = 'localhost'
    devDockerPort = 2376

    // Publishing configuration
    snapshotMavenRepo = "http://sonar.dev.cwds.io:8081/artifactory/repo"
    releaseMavenRepo = "http://sonar.dev.cwds.io:8081/artifactory/libs-release"
    artifactoryRepo = releaseMavenRepo
}

if (System.getProperty('newVersion') && System.getProperty('newVersion')!='null') {
      def newVersion = "${System.getProperty('newVersion')}"
      version = newVersion
      projectVersion = newVersion
} else {
      version = projectVersion
}
def dockerTag = version

repositories {
  mavenLocal()
  maven {
    url "http://pr.dev.cwds.io/artifactory/repo"
  }
  mavenCentral()
}

sonarqube {
    properties {
        property "sonar.projectName", "${name}"
        property "sonar.projectKey", "${group}:${name}"
        property "sonar.jacoco.reportPath", "${buildDir}/jacoco/test.exec"
        property "sonar.jacoco.itReportPath", "${buildDir}/jacoco/integrationTest.exec"
        property "sonar.exclusions", "src/main/java/gov/ca/cwds/xpack/realm/perry/*.*"
    }
}

task printConfig {
    doLast {
        project.ext.properties
                .sort { e1, e2 -> e1.key <=> e2.key }
                .each { k, v -> println "${k} = " + v }
    }
}

tasks.withType(Test) {
    enableAssertions = true
}

// reused in sub-modules
def isPortOpen(host, port) {
    try {
        Socket socket = new Socket(host, port)
        socket.close()
        return true
    } catch (IOException e) {
        return false
    }
}

project.ext.dockerEnvVars = project.buildEnv != 'WIN_DEV' ? [:] : [
    DOCKER_CERT_PATH: System.getProperty("user.home") + '/.docker/machine/machines/default',
    DOCKER_HOST: "tcp://$project.devDockerHost:$project.devDockerPort",
    DOCKER_MACHINE_NAME: 'default',
    DOCKER_TLS_VERIFY: '1',
    COMPOSE_CONVERT_WINDOWS_PATHS: 'true'
]

// reused in sub-modules
task checkDockerService {
    enabled = project.buildEnv == 'WIN_DEV'
    doFirst {
        if (!isPortOpen(project.devDockerHost, project.devDockerPort)) {
            throw new GradleException('Docker service is not available. Windows users should start Docker Quickstart Terminal of Docker Toolbox')
        }
    }
}

