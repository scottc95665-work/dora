def notifyBuild(String buildStatus, Exception e) {
    buildStatus =  buildStatus ?: 'SUCCESSFUL'

    // Default values
    def colorName = 'RED'
    def colorCode = '#FF0000'
    def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
    def summary = """*${buildStatus}*: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':\nMore detail in console output at <${env.BUILD_URL}|${env.BUILD_URL}>"""
    def details = """${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':\n
    Check console output at ${env.BUILD_URL} """
    // Override default values based on build status
    if (buildStatus == 'STARTED') {
        color = 'YELLOW'
        colorCode = '#FFFF00'
    } else if (buildStatus == 'SUCCESSFUL') {
        color = 'GREEN'
        colorCode = '#00FF00'
    } else {
        color = 'RED'
        colorCode = '#FF0000'
        details +="<p>Error message ${e.message}, stacktrace: ${e}</p>"
        summary +="\nError message ${e.message}, stacktrace: ${e}"
    }

    // Send notifications

    slackSend channel: "#cals-api", baseUrl: 'https://hooks.slack.com/services/', tokenCredentialId: 'slackmessagetpt2', color: colorCode, message: summary
    emailext(
            subject: subject,
            body: details,
            attachLog: true,
            recipientProviders: [[$class: 'DevelopersRecipientProvider']],
            to: "Leonid.Marushevskiy@osi.ca.gov, Alex.Kuznetsov@osi.ca.gov"
    )
}

node ('dora-slave'){
    def serverArti = Artifactory.server 'CWDS_DEV'
    def rtGradle = Artifactory.newGradleBuild()
    properties([
      buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '5', numToKeepStr: '15')), disableConcurrentBuilds(),
      disableConcurrentBuilds(),
      [$class: 'RebuildSettings', autoRebuild: false, rebuildDisabled: false],
      parameters([
        string(defaultValue: 'master', description: '', name: 'branch'),
        booleanParam(defaultValue: true, description: '', name: 'ES_POPULATE_TEST_PEOPLE')
      ])
    ])

    def errorcode = null;
    def buildInfo = '';

    try {
        stage('Preparation') {
            cleanWs()
            git branch: '$branch', credentialsId: '433ac100-b3c2-4519-b4d6-207c029a103b', url: 'git@github.com:ca-cwds/dora.git'
            rtGradle.tool = "Gradle_35"
            rtGradle.resolver repo:'repo', server: serverArti
        }
        stage('Build Docker'){
            withEnv(['ELASTIC_HOST=127.0.0.1','ELASTIC_PORT=10200']) {
                buildInfo = rtGradle.run buildFile: 'build.gradle', tasks: 'printConfig', switches: '--info'
                buildInfo = rtGradle.run buildFile: './docker-es-xpack/build.gradle', tasks: 'dockerCreateImage', switches: '--info'
            }
        }
        stage('Publish Docker'){
                    withEnv(['ELASTIC_HOST=127.0.0.1','ELASTIC_PORT=10200']) {
                        withDockerRegistry([credentialsId: '6ba8d05c-ca13-4818-8329-15d41a089ec0']) {
                            buildInfo = rtGradle.run buildFile: './docker-es-xpack/build.gradle', tasks: 'dockerEsXpackPublish -Des.populate.test.people=$ES_POPULATE_TEST_PEOPLE', switches: '--info'
                        }
                    }
                }
        stage('Clean WorkSpace') {
            buildInfo = rtGradle.run buildFile: './docker-es-xpack/build.gradle', tasks: 'dockerRemoveContainer'
            buildInfo = rtGradle.run buildFile: './docker-es-xpack/build.gradle', tasks: 'dockerCleanUpTagged'
        }

    } catch (Exception e)    {
        errorcode = e
        currentBuild.result = "FAIL"
        notifyBuild(currentBuild.result,errorcode)
        throw e;
    }
}
